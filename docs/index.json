[
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/coding/code-blocks/",
	"title": "Code blocks",
	"tags": [],
	"description": "",
	"content": " Markdown already supports code samples both inline (using single backticks like `some code here`) and in blocks. Cupper will syntax highlight HTML, CSS, and JavaScript if you provide the correct language in the formulation of the block.\nSo, this\u0026hellip;\n```html \u0026lt;button aria-pressed=\"false\"toggle me\u0026lt;/button ```  \u0026hellip; will result in this:\n\u0026lt;button aria-pressed=\u0026quot;false\u0026quot;\u0026gt;toggle me\u0026lt;/button\u0026gt;  Note that the syntax highlighting uses a greyscale theme. Cupper is careful not to use color as part of its own design, because these colors may clash with those of the design being illustrated and discussed.\n   To preserve the wrapping inside code blocks, horizontal scrolling is implemented. To make sure scrolling is keyboard accessible, code blocks are focusable. An aria-label is provided to identify the code block to screen reader users.\n  Annotated code Cupper offers the ability to highlight and annotate specific parts of your code examples using the code shortcode. Take an accessible dialog. You may wish to point out key attributes that make that dialog support assistive technologies:\n \u0026lt;div role=\u0026#34;dialog\u0026#34; aria-labelledby=\u0026#34;dialog-heading\u0026#34;\u0026gt; \u0026lt;button aria-label=\u0026#34;close\u0026#34;\u0026gt;x\u0026lt;/button\u0026gt; \u0026lt;h2 id=\u0026#34;dialog-heading\u0026#34;\u0026gt;Confirmation\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Press \u0026lt;strong\u0026gt;Okay\u0026lt;/strong\u0026gt; to confirm or \u0026lt;strong\u0026gt;Cancel\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;button\u0026gt;Okay\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;Cancel\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt;  You mark out the highlighted areas using triple square brackets like so:\n\u0026#x7b;{\u0026lt;code}} \u0026lt;div [[[role=\"dialog\"]]] [[[aria-labelledby=\"dialog-heading\"]]] \u0026lt;button [[[aria-label=\"close\"]]]x\u0026lt;/button \u0026lt;h2 [[[id=\"dialog-heading\"]]]Confirmation\u0026lt;/h2 \u0026lt;pPress Okay to confirm or Cancel\u0026lt;/p \u0026lt;buttonOkay\u0026lt;/button \u0026lt;buttonCancel\u0026lt;/button \u0026lt;/div \u0026#x7b;{\u0026lt;/code}}  Better still, if you include numbered=\u0026quot;true\u0026quot;, each highlight is enumerated so you can reference it directly in the ensuing text. If you follow the shortcode directly with an ordered list, the styles match:\n \u0026lt;div role=\u0026#34;dialog\u0026#34; aria-labelledby=\u0026#34;dialog-heading\u0026#34;\u0026gt; \u0026lt;button aria-label=\u0026#34;close\u0026#34;\u0026gt;x\u0026lt;/button\u0026gt; \u0026lt;h2 id=\u0026#34;dialog-heading\u0026#34;\u0026gt;Confirmation\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Press \u0026lt;strong\u0026gt;Okay\u0026lt;/strong\u0026gt; to confirm or \u0026lt;strong\u0026gt;Cancel\u0026lt;/strong\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;button\u0026gt;Okay\u0026lt;/button\u0026gt; \u0026lt;button\u0026gt;Cancel\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt;   The dialog is only announced as a dialog if it takes the dialog ARIA role The aria-labelledby relationship attribute makes the element carrying the id it points to its label The close button uses aria-label to provide the text label \u0026ldquo;close\u0026rdquo;, overriding the text content The heading is used as the dialog\u0026rsquo;s label. The aria-labelledby attribute points to its id  You just include numbered=\u0026quot;true\u0026quot; on the opening shortcode tag:\n\u0026#x7b;{\u0026lt;code numbered=\"true\"}} \u0026lt;div [[[role=\"dialog\"]]] [[[aria-labelledby=\"dialog-heading\"]]] \u0026lt;button [[[aria-label=\"close\"]]]x\u0026lt;/button \u0026lt;h2 [[[id=\"dialog-heading\"]]]Confirmation\u0026lt;/h2 \u0026lt;pPress Okay to confirm or Cancel\u0026lt;/p \u0026lt;buttonOkay\u0026lt;/button \u0026lt;buttonCancel\u0026lt;/button \u0026lt;/div \u0026#x7b;{\u0026lt;/code}} 1. The dialog is only announced as a dialog if it takes the `dialog` ARIA role 2. The `aria-labelledby` relationship attribute makes the element carrying the `id` it points to its label 3. The close button uses `aria-label` to provide the text label \"close\", overriding the text content 4. The heading is used as the dialog's label. The `aria-labelledby` attribute points to its `id`  JavaScript example  /* Enable scrolling by keyboard of code samples */ (function () { var codeBlocks = document.querySelectorAll(\u0026#39;pre, .code-annotated\u0026#39;); Array.prototype.forEach.call(codeBlocks, function (block) { if (block.querySelector(\u0026#39;code\u0026#39;)) { block.setAttribute(\u0026#39;role\u0026#39;, \u0026#39;region\u0026#39;); block.setAttribute(\u0026#39;aria-label\u0026#39;, \u0026#39;code sample\u0026#39;); if (block.scrollWidth \u0026gt; block.clientWidth) { block.setAttribute(\u0026#39;tabindex\u0026#39;, \u0026#39;0\u0026#39;); } } }); }());   The region role announces the block as a region The aria-label describes the kind of content to be expected in the region     As you may have noticed, using specified highlights with the code shortcode sacrifices syntax highlighting. If you want syntax highlighting you must use the markdown triple back-tick syntax and annotation is not available.\n  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": " Cupper is built using the static site engine, Hugo, and NPM. The codebase is available to download on Github. Let\u0026rsquo;s get everything installed step-by-step.\nInstall Hugo First you need to install Hugo globally.\nOSX users If you are a Mac user and have Homebrew on your system, installing Hugo is simple:\nbrew install hugo Alternatively, you can manually install Hugo from a package. You can verify the installation was successful by typing:\nhugo version Windows users Installing on Windows is a little more involved than on OSX. The authors of Hugo provide a guide with instructions for technical and less technical users.\nIt\u0026rsquo;s also best you install a Windows Subsystem for running Linux, and therefore bash (Cupper incorporates some bash commands in its scripts). Microsoft offer a complete guide.\nInstall Node \u0026amp; NPM It is likely you already have Node and NPM installed on your system. If so, you can skip this step. Otherwise, refer to NPM\u0026rsquo;s own guide, which includes a video tutorial.\nGet the files Cupper is hosted on Github. To start using it, you\u0026rsquo;ll need to get the files from there. If you are comfortable with the command line, just fork the github.com/ThePacielloGroup/cupper repository, then do a git clone to your local system. Replace [your username] in the following:\ngit clone https://github.com/[your username]/cupper.git If the command line is not your thing, use Github\u0026rsquo;s web interface to fork github.com/ThePacielloGroup/cupper and choose Open in Desktop from Clone or download (see figure 1, below).\nThe Github web interface      If you do not have a version of the Github desktop client installed, follow the prompts after clicking Open in Desktop.\n  While you\u0026rsquo;re in the Github interface, you might as well set up the publishing source for the live site. Choose the Master branch/docs option under Settings → Github Pages → Source. See  Serving for more details.\nOnce you have your local copy of the files, move to the root of that folder and in your terminal run the installation script:\n./install Now it\u0026rsquo;s time to consult the  Setup pattern.\n"
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/writing/project-structure/",
	"title": "Project structure",
	"tags": [],
	"description": "",
	"content": " Before you can set about making documentation, you need to know where everything goes. The simplest folder structure looks like this:\n content  _index.md print-version.md patterns  name-of-my-pattern.md name-of-my-other-pattern.md      /content - This is where all of your content lives. You won\u0026rsquo;t need to visit any other folders very frequently. _index.md — This is the content file for your home page. print-version.md — This is a placeholder for the single-page / print-friendly version of you library. Leave this file as it is. /patterns — This is the folder where individual content files are kept. Cupper refers to each individual documentation file/page as a \u0026ldquo;pattern\u0026rdquo;.  Subsections You may have noticed that this site\u0026rsquo;s navigation is divided partly into subsections, with labels like \u0026ldquo;Writing\u0026rdquo;. Cupper (or, rather, Hugo) allows you to create such subsections by simply nesting folders under the /patterns folder. In the following example, I have a subsection about different types of \u0026ldquo;popup\u0026rdquo; pattern.\n content  _index.md patterns  name-of-my-pattern.md name-of-my-other-pattern.md popups  _index.md popup-menu.md tooltips.md      Subfolders like /popups must each have an _index.md file. This file doesn\u0026rsquo;t need any content except the TOML metadata defining the title (name) of that subsection:\n+++ title = \u0026quot;Popup windows\u0026quot; +++  This title is what labels the subsection in the navigation, not the folder name (/popups, in this case). For each subfolder you create, you must also create one of these _index.md files. The /patterns folder itself does not need one, however.\n   Cupper does not currently support sub-subsections. You can only create child folders under /patterns.\n  Now that you know where to put everything, it\u0026rsquo;s time to talk about how to actually write individual patterns. Don\u0026rsquo;t worry, it\u0026rsquo;s pretty straightforward. Turn to  Markdown \u0026amp; metadata.\n"
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/writing/",
	"title": "Writing",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/coding/demo-embedding/",
	"title": "Demo embedding",
	"tags": [],
	"description": "",
	"content": " Sometimes just pictures of the pattern you\u0026rsquo;re documenting aren\u0026rsquo;t enough. Interactive patterns benefit from live demos, so that readers can test their functionality.\nCodePen Cupper offers a couple of ways to do this. The first is by embedding CodePen demos into the content. The codePen shortcode takes just one argument: the codePen\u0026rsquo;s ID.\n\u0026#x7b;{% codePen VpVNKW %}}  This will embed the identified codePen into the content wherever you placed the shortcode, with the result view showing by default:\n See the demo on codePen      The compiled site will output an error if your config.toml does not include your CodePen username (in the codePenUser parameter). This is needed to construct the embed URL.\n  jsBin You can embed JS Bins just like CodePens, supplying a single id parameter.\n\u0026#x7b;{% jsBin juwowaq %}}  However, you can also have finer control over which panes are displayed. Use two parameters: one for the id and another, show, listing the panes you want to include.\n\u0026#x7b;{% jsBin id=\"juwowaq\" show=\"css,output\" %}}  The options for the show parameter are:\n html css js console output  (Note that, under some circumstances, the html pane is added whether you select it or not.)\n Inline demos Cupper also supports the ability to write inline demos directly in markdown files. See  Writing inline demos.\n"
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/media/",
	"title": "Media",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/setup/",
	"title": "Setup",
	"tags": [],
	"description": "",
	"content": " By now, you should have followed the  Installation instructions. You should have Hugo and Node installed, and a local copy of a forked version of Cupper. You should also have run npm install in the root of that codebase.\n\u0026ldquo;Cleaning\u0026rdquo; the content folder Before you can start writing documentation, there are a few things still to do in order to get set up. At the moment, your version of Cupper is a facsimile of the original, containing all the content you\u0026rsquo;re reading right now. We want to delete that content and replace it with some starter content. There\u0026rsquo;s a simple clean command for this.\n   If you are contributing to an existing Cupper library, do not run the following command. It will delete all of the patterns in that library. The clean command is just for libraries that you are starting from scratch.\n   npm run clean This will leave your content folder with just an _index.md file and a patterns folder containing a single demonstration pattern file. Individual content pages in Cupper are referred to as \u0026ldquo;patterns\u0026rdquo; — think pattern libraries). Find out more about these in  Project structure.\nThe config file You\u0026rsquo;ll also want to name your project and configure one or two other things in the config.toml file that\u0026rsquo;s found at the root of your project. Here\u0026rsquo;s how that file looks:\nlanguageCode = \"en-us\" title = \"Cupper\" baseURL = \"https://thepaciellogroup.github.io/cupper/\" theme = \"cupper\" [params] description = \"Documentation for the **Cupper** documentation builder. This documentation is constructed using the builder itself.\" codePenUser = \"Heydon\"   title — This is the project\u0026rsquo;s name, like \u0026ldquo;Megacorp 5000 Pattern Library\u0026rdquo; or \u0026ldquo;Assplosion.js Documentation\u0026rdquo;. For Cupper\u0026rsquo;s own version of Cupper, the title is simply Cupper :-) baseURL — This is the root of the live site. Typically you will publish the site to Github Pages, so this should be the base URL for your Github Pages site. theme — This is the theme the library is using. Don\u0026rsquo;t change this from \u0026ldquo;cupper\u0026rdquo;. description — This is a short description of your documentation project and comes under the logo. You can include markdown syntax here, like \u0026#x002a;\u0026#x002a;Cupper\u0026#x002a;\u0026#x002a; in the above example for making the name of the library bold. codePenUser — If you want to embed codePens in your pattern files, you need to supply a codePen username here.  The Web App Manifest Cupper projects work as progressive web applications, meaning users can save them to their home screen and read them offline. The web app manifest, found at the root of the static folder, defines names and icons for the app. You\u0026rsquo;ll probably want to open /static/manifest.json and personalize the name and short_name values.\n{ \u0026quot;name\u0026quot;: \u0026quot;Cupper Documentation Builder\u0026quot;, \u0026quot;short_name\u0026quot;: \u0026quot;Cupper Docs\u0026quot;, \u0026quot;icons\u0026quot;: [ {...  Cupper\u0026rsquo;s Docs, with short_name displayed, available from the homescreen of a Samsung/Android phone.      The short_name value refers to the text that appears under the icon on your homescreen. As the name suggests, it should be as short as possible to fit well (12 characters or fewer is ideal).\n  Including a logo In the images/static folder, you\u0026rsquo;ll find a logo.svg file. Replace this file with your own company or project logo, under the same file name. Currently, only SVG is supported this easily because SVG is the superior format for logos. However, if you must use a different format, you can open up the themes/cupper/layouts/_default/baseof.html file and edit the image reference:\n\u0026lt;a class=\u0026quot;logo\u0026quot; href=\u0026quot;/\u0026quot; aria-label=\u0026quot;{{ .Site.Title }} pattern library home page\u0026quot;\u0026gt; \u0026lt;img src=\u0026quot;{{ \u0026quot;images/logo.svg\u0026quot; | absURL }}\u0026quot; alt=\u0026quot;\u0026quot;\u0026gt; \u0026lt;/a\u0026gt;  Now that your logo is in place, everything should be ready. Where next? You can learn about  Project structure to help you get writing, or find out how to serve the site locally and on Github Pages in  Serving.\n"
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/writing/markdown-and-metadata/",
	"title": "Markdown &amp; metadata",
	"tags": ["metadata", "markdown"],
	"description": "",
	"content": " In Cupper everything is documented using markdown, as a \u0026ldquo;pattern\u0026rdquo;. To create a new pattern file, just add a file with the .md extension to the content/patterns folder. It\u0026rsquo;s recommended you use \u0026ldquo;kebab case\u0026rdquo; to name the file (words separated by hyphens). For example, a pattern with the title \u0026ldquo;Menu button\u0026rdquo; should probably have the filename menu-button. Then you get a nice clean URL: username.github.io/your-library/patterns/menu-button.\nIf you\u0026rsquo;re not familiar with writing markdown, there are a number of tutorials available. One of the best is Mastering Markdown offered by Github. There\u0026rsquo;s also a nice cheatsheet here.\nThe metadata Like many static site generators, Hugo lets you add metadata to its markdown files. Hugo\u0026rsquo;s brand of metadata is called TOML (although YAML is also accepted). The only thing you have to put in the TOML is a title — like this:\n+++ title = \u0026quot;Menu button\u0026quot; +++     The title automatically becomes the page\u0026rsquo;s main \u0026lt;h1\u0026gt; heading. The highest heading level you should use in the body of your markdown file is therefore \u0026lt;h2\u0026gt;.\n  Tags If you like, you can also tag the pattern so that it turns up in lists of similar content. You add tags in an array format. Note that all the TOML data is found at the top of the markdown file, between the +++ lines.\n+++ title = \u0026quot;Menu button\u0026quot; tags = [\u0026quot;interactive\u0026quot;, \u0026quot;popup\u0026quot;, \u0026quot;javascript\u0026quot;] +++  This will create links to pages listing content tagged with the same terms using the URL schema /tag/[tag name]. Some example tags links are provided for this page, which you can see listed under the main heading.\nWeight By default, patterns are listed alphabetically in the navigation. However, sometimes you might like to change the order around. This is possible by adding a weight parameter. To make my menu button pattern appear at the top of its subsection, I would give it a weight of 1:\n+++ title = \u0026quot;Menu button\u0026quot; tags = [\u0026quot;interactive\u0026quot;, \u0026quot;popup\u0026quot;, \u0026quot;javascript\u0026quot;] weight = 1 +++     The weight parameter should be an integer, not a string, so don\u0026rsquo;t use scare quotes around the value!\n  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/serving/",
	"title": "Serving",
	"tags": [],
	"description": "",
	"content": " Serving locally While you\u0026rsquo;re creating content for your project, you\u0026rsquo;ll probably want to see what the finished product looks like. Fortunately, Cupper is easy to serve locally using the serve command:\nnpm run serve This will serve your working project from localhost:1313. Whenever you make changes to your files, the site will automatically rebuild. No need to refresh the web page!\nPublishing on Github Pages Cupper creates a /docs folder containing the latest version of your site whenever you do an npm run build or a git commit. So long as you forked the Cupper repository when making your own version (see  Setup), whenever you push to master, you will also be updating the site found at your Github Pages URL.\nThis URL will be in the following format:\n[your user name].github.io/[your library repo name]  You\u0026rsquo;ll also need to add this value to your config.toml file as the baseURL. For Cupper\u0026rsquo;s own documentation it looks like the following. Just overwrite it.\nbaseURL = \u0026quot;https://thepaciellogroup.github.io/cupper/\u0026quot;  Set the publishing source You will find the docs folder is not automatically setup as the publishing source, even when forking the repo. In which case, you must set it under Settings → Github Pages → Source in the web interface.\n"
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/coding/writing-inline-demos/",
	"title": "Writing inline demos",
	"tags": [],
	"description": "",
	"content": " There are some issues with  Demo embedding, like the embeds not working offline. They also come with their own branding, which will clash with the pattern you\u0026rsquo;re trying to illustrate.\nCupper offers another option: a special demo shortcode that allows you to write HTML, CSS, and JavaScript directly into the markdown file. The outputted demo is encapsulated using Shadow DOM, so you don\u0026rsquo;t have to worry about broken styles and global JS.\nHere\u0026rsquo;s the example code for an inline demo of a toggle button:\n\u0026#x7b;{\u0026lt;demo}} \u0026lt;button aria-pressed=\"false\"Toggle Me\u0026lt;/button \u0026lt;style button { background: DarkCyan; color: white; border: 0; font-size: 1.5rem; padding: 0.5em 1em; border-right: 5px solid #000; border-bottom: 5px solid #000; } [aria-pressed=\"true\"] { border: 0; border-top: 5px solid #000; border-left: 5px solid #000; } \u0026lt;/style \u0026lt;script var toggle = demo.querySelector('[aria-pressed]'); toggle.addEventListener('click', (e) = { let pressed = e.target.getAttribute('aria-pressed') === 'true'; e.target.setAttribute('aria-pressed', !pressed); }); \u0026lt;/script \u0026#x7b;{\u0026lt;/demo}}  Note the demo.querySelector on line 21. Cupper automatically provides demo, representing the root node of the demo. It\u0026rsquo;s like the document keyword but for a demo\u0026rsquo;s subtree.\nHere\u0026rsquo;s a live demo of the demo:\n Launch ↗  Toggle Me  button { background: DarkCyan; color: white; border: 0; border-radius: 0.25em; font-size: 1.5rem; padding: 0.5em 1em; border-right: 5px solid #000; border-bottom: 5px solid #000; } [aria-pressed=\"true\"] { border: 0; border-top: 5px solid #000; border-left: 5px solid #000; }   var toggle = demo.querySelector('[aria-pressed]'); toggle.addEventListener('click', function () { var pressed = this.getAttribute('aria-pressed') === 'true'; this.setAttribute('aria-pressed', !pressed); });    (function() { var root = document.getElementById('js-demo-285170a1c0812ad34ac4b853a052c8bd'); var template = document.getElementById('template-285170a1c0812ad34ac4b853a052c8bd'); var demoDiv = document.createElement('div'); demoDiv.innerHTML = template.innerHTML; var standaloneScript = demoDiv.querySelector('script'); if (standaloneScript) { standaloneScript.textContent = '(function() { document.getElementsByTagName(\\'html\\')[0].setAttribute(\\'lang\\', \\'en\\'); var demo = document; ' + standaloneScript.textContent + ' })();'; } if (document.head.attachShadow) { var templateScript = template.content.querySelector('script'); if (templateScript) { var wrappedScript = '(function() { var demo = document.getElementById(\\'js-demo-285170a1c0812ad34ac4b853a052c8bd\\').shadowRoot;' + templateScript.textContent + '})();'; templateScript.textContent = wrappedScript; } root.attachShadow({mode: 'open'}); root.shadowRoot.appendChild(document.importNode(template.content, true)); } else { root.innerHTML = 'Site error: A browser supporting Shadow DOM is needed to run encapsulated demos. You can launch the demo in a separate window ↓\n'; } var launchButton = document.querySelector('[data-launch=\"js-demo-285170a1c0812ad34ac4b853a052c8bd\"]'); launchButton.addEventListener('click', function () { var standalone = window.open(); standalone.document.body.innerHTML = demoDiv.innerHTML; var newScript = standalone.document.createElement('script'); var oldScript = standalone.document.querySelector('script'); if (oldScript) { newScript.textContent = oldScript.textContent; oldScript.parentNode.removeChild(oldScript); standalone.document.body.appendChild(newScript); } standalone.document.title = 'demo ' + \"285170a1c0812ad34ac4b853a052c8bd\"; }); })();   Styling the container Sometimes your component will be expected to appear in a context where the parent element has a background color and possibly other styles. You can add style to your demo block\u0026rsquo;s container element using the style attribute. It works just like standard inline styling.\n\u0026#x7b;{\u0026lt;demo style=\"background-color: pink; padding: 1rem;\"}} \u0026lt;!-- demo code here -- \u0026#x7b;{\u0026lt;/demo}}  \u0026ldquo;Launch\u0026rdquo; The \u0026ldquo;Launch\u0026rdquo; button takes the demo code and pushes it to a new browser tab. This serves two purposes:\n It provides a fallback for browsers that do not support Shadow DOM encapsulation (a warning message will replace the inline demo). It creates an isolated test case for the demo, allowing you to run browser extensions and bookmarklets on the the demo code and just the demo code.     The \u0026ldquo;Launch\u0026rdquo; button is positioned over the styleable demo container. Bear this is mind when styling the container (see the previous section).\n  Captioned demos It\u0026rsquo;s possible to give your demo a caption using an accessible \u0026lt;figure\u0026gt; and \u0026lt;figcaption\u0026gt; structure. All you need to do is supply a caption attribute. For example:\n\u0026#x7b;{\u0026lt;demo caption=\"A basic button element\"}} \u0026lt;!-- demo code here -- \u0026#x7b;{\u0026lt;/demo}}  Along with the standard figure shortcodes (described in  Including images), demo figures are numbered automatically according to their order in the page. You can use markdown syntax in the caption text value.\n"
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/printing/",
	"title": "Printing",
	"tags": [],
	"description": "",
	"content": "Cupper\u0026rsquo;s output site includes a one-page  Print version of the generated library, available at /print-version. So, if your library base URL is https://yourName.github.io/your-library, you can print the whole library — to PDF if wanted — from the following address:\nhttps://yourName.github.io/your-library/print-version     Print styles are also provided for individual pattern pages so, if you wanted to print off a single pattern document, you can!\n  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/updating/",
	"title": "Updating Cupper",
	"tags": [],
	"description": "",
	"content": "The core of Cupper\u0026rsquo;s functionality is in its Hugo theme, called Cupper Hugo Theme. This is installed in the theme folder when you run the installation script. You can also install it separately into any Hugo instance.\n content docs lib snippets static themes  cupper    Do not \u0026ldquo;hack the core\u0026rdquo;. If you have any issues with Cupper, please report them to the Cupper Github repository and they will be dealt with ASAP.\nCupper is undergoing constant development, so keep an eye out for new releases. To update to a new version of Cupper, simply run the update command from inside your local project folder.\n./update This will update the Cupper Hugo Theme to its latest version.\n"
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/writing/expandable-sections/",
	"title": "Expandable sections",
	"tags": [],
	"description": "",
	"content": "In some cases, where there is a lot of content, it\u0026rsquo;s helpful to collapse certain sections. That way, readers get an overview of what\u0026rsquo;s in the content and can choose where to focus in. Cupper provides a shortcode method for creating expandable sections which generates accessible markup using aria-expanded.\nThe expandable shortcode takes three parameters:\n label — This is the label for the the section heading. level — This is the heading level (e.g. level=\u0026quot;2\u0026quot; for an \u0026lt;h2\u0026gt;) that will contain the label. If you omit a level parameter, no heading is used; it\u0026rsquo;s just a button. open — Include this and give it a value of \u0026ldquo;true\u0026rdquo; or \u0026ldquo;yes\u0026rdquo; to make the section expanded on page load.  Here\u0026rsquo;s what the code might look like for a simple expandable section containing markdown:\n\u0026#x7b;{% expandable label=\"A section of dummy text\" level=\"2\" %}} Here is some markdown including [a link](https://twitter.com/heydonworks). Donec erat est, feugiat a est sed, aliquet pharetra ipsum. Vivamus in arcu leo. Praesent feugiat, purus a molestie ultrices, libero massa iaculis ante, sit amet accumsan leo eros vel ligula. \u0026#x7b;{% /expandable %}}  Let\u0026rsquo;s look at what that outputs:\n A section of dummy text     Here is some markdown including a link. Donec erat est, feugiat a est sed, aliquet pharetra ipsum. Vivamus in arcu leo. Praesent feugiat, purus a molestie ultrices, libero massa iaculis ante, sit amet accumsan leo eros vel ligula.\n  Successive collapsible sections fit snugly together. The second of the following two has open=\u0026quot;true\u0026quot;.\n A section of dummy text     Mauris eget elit ut neque venenatis placerat id nec libero. Nunc accumsan cursus elit nec iaculis. Proin id rutrum magna, a aliquet sem. Sed et tortor id sem eleifend porta vitae eget elit. Cras sodales porta malesuada. Suspendisse at odio ac tortor.\n   Another dummy section     Ut vulputate enim ut lorem iaculis, vel faucibus metus iaculis. Aliquam erat volutpat. Aliquam luctus orci vel consectetur dignissim. Nullam et efficitur lorem, et ornare est. Sed tristique porttitor justo, quis malesuada velit. Nullam et elit finibus, sollicitudin velit placerat, ultricies dui.\n  Unfortunately, it is not currently possible to include shortcodes inside other shortcodes, using the \u0026ldquo;%\u0026rdquo; notation (which is designated for markdown content). If you use the angle brackets notation (illustrated below) it is possible, but markdown will no longer be permitted. You will have to code HTML inside such a section manually.\n\u0026#x7b;{\u0026lt;expandable label=\"A section of dummy text\" level=\"2\"}} \u0026lt;pHere is a pattern reference shortcode: \u0026#x7b;{% pattern \"Writing inline demos\" %}}.\u0026lt;/p \u0026#x7b;{\u0026lt;/expandable}}     When you go to print a pattern from your library, some print styles take care of collapsible sections, making them appear expanded and like any other section.\n  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/print-version/",
	"title": "Print version",
	"tags": [],
	"description": "",
	"content": "You don\u0026rsquo;t want to edit this file :-)\n"
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/",
	"title": "The Cupper Documentation Builder",
	"tags": [],
	"description": "",
	"content": "Welcome to Cupper: a documentation builder for inclusive designers and those trying to be inclusive designers. These are Cupper\u0026rsquo;s docs, but they are also an example of a site built with Cupper. Here are some of its features:\n Built with Hugo, so easy to structure content and fast to compile it Available to read offline, as a Progressive Web App Include encapsulated live demos, inline with your markdown, using Shadow DOM Quickly include WCAG and Inclusive Design Principles references A responsive, screen reader and keyboard accessible static site as output Automated Github Pages deployment Includes a single-page printable version suitable for PDF conversion   To get started, take a look at  Installation.\n"
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/coding/",
	"title": "Coding",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/coding/color-palettes/",
	"title": "Color palettes",
	"tags": [],
	"description": "",
	"content": "There\u0026rsquo;s no reason why your Cupper-powered pattern library has to be all about functionality. You can include style guide-like information such as color palettes too. The colors shortcode makes it easy to exhibit colors and their values together. Just supply a comma-separated list of CSS color values.\n\u0026#x7b;{% colors \"#111111, #cccccc, #ffffff\" %}}  The result is a one row strip showing each color supplied in order. The colors for Cupper are greyscale:\n#111111  #CCCCCC  #FFFFFF       If you\u0026rsquo;re wondering whether you need to put a space after the commas in the shortcode, don\u0026rsquo;t worry: \u0026quot;#254f7b, #579a6d, #666666\u0026quot; and \u0026quot;#254f7b,#579a6d,#666666\u0026quot; are both accepted. Any CSS color value is acceptable, not just hex colors.\n  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/coding/command-line/",
	"title": "Command line",
	"tags": [],
	"description": "",
	"content": "Your pattern documentation may need to include commands for installing packages or using CLIs. Cupper offers the cmd shortcode for making code blocks look like terminal commands.\nHere\u0026rsquo;s how you write it:\n\u0026#x7b;{\u0026lt;cmd}} npm run start \u0026#x7b;{\u0026lt;/cmd}}  And here\u0026rsquo;s how it looks:\nnpm run start    The cmd shortcode currently only supports single commands. If you want to show multiple, successive commands use separate cmd blocks.\n  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/coding/file-trees/",
	"title": "File trees",
	"tags": [],
	"description": "",
	"content": "Representing folder/file structures is simple and accessible in Cupper. Which is just as well, because some components may need to conform to a certain folder structure.\nThe file tree is described using a markdown nested list structure:\n\u0026#x7b;{% fileTree %}} * Level 1 folder * Level 2 file * Level 2 folder * Level 3 file * Level 3 folder * Level 4 file * Level 3 folder * Level 4 file * Level 4 file * Level 3 file * Level 2 folder * Level 3 file * Level 3 file * Level 3 file * Level 2 file * Level 1 file \u0026#x7b;{% /fileTree %}}  This is drawn in the following fashion, but preserves the underlying nested list structure for assistive technologies such as screen readers:\n Level 1 folder  Level 2 file Level 2 folder  Level 3 file Level 3 folder  Level 4 file  Level 3 folder  Level 4 file Level 4 file  Level 3 file  Level 2 folder  Level 3 file Level 3 file Level 3 file  Level 2 file  Level 1 file      The only reliable way to nest unordered lists in markdown is to indent the nested item by exactly four spaces. Using tabs or less than four spaces are unreliable methods.\n  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/media/including-images/",
	"title": "Including images",
	"tags": [],
	"description": "",
	"content": " From time to time, you\u0026rsquo;ll be wanting to include images illustrating the documented pattern in hand. Images live in the static folder, which is a sibling of the /content folder you\u0026rsquo;ll be mostly working in.\n content static  images  logo.png menu-button.gif        When you first make a copy of Cupper, Cupper\u0026rsquo;s own logo will be included. You should replace this with your own company or project logo.\n  The path to the /images folder should begin with a forward slash, so include that when referencing images in your markdown.\n![Global Megacorp Ltd](/images/logo.png)  Figures Sometimes you will want to include a caption with your illustration. This is what the \u0026lt;figure\u0026gt; and \u0026lt;figcaption\u0026gt; elements are for. However, Cupper doesn\u0026rsquo;t ask you to code all that manually. A special shortcode is provided, which takes a caption parameter. Note that the image markdown is provided between the opening and closing shortcode tags, and that you can use markdown syntax in the caption value.\n\u0026#x7b;{% figure caption=\"A design system that uses a bad code example as a **single source of truth** only serves to proliferate bad code.\" %}} ![Diagram of a design pattern represented by a turd emoji begetting three bad implementations](/images/bad_design_system.png) \u0026#x7b;{% /figure %}}  This will output the following. Note the automatically incremented Figure number.\nA design system that uses a bad code example as a single source of truth only serves to proliferate bad code.   The generated markup includes special provisions for assistive technology support:\n\u0026lt;figure role=\u0026quot;group\u0026quot; aria-describedby=\u0026quot;caption-5fbafefe946c724e7a5d3d2d447a8684\u0026quot;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;img src=\u0026quot;http://localhost:1313/images/bad_design_system.png\u0026quot; alt=\u0026quot;Diagram of a design pattern represented by a turd emoji begetting three bad implementations\u0026quot;\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;figcaption id=\u0026quot;caption-5fbafefe946c724e7a5d3d2d447a8684\u0026quot;\u0026gt; A design system that uses a bad code example as a \u0026lt;strong\u0026gt;single source of truth\u0026lt;/strong\u0026gt; only serves to proliferate bad code. \u0026lt;/figcaption\u0026gt; \u0026lt;/figure\u0026gt;  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/media/including-videos/",
	"title": "Including videos",
	"tags": [],
	"description": "",
	"content": "Cupper has a lot of its own shortcodes, but you can still use Hugo\u0026rsquo;s built in shortcodes. These include a simple shortcode for including YouTube videos in your content. The shortcode takes just one parameter — the video\u0026rsquo;s id.\n\u0026#x7b;{\u0026lt;youtube w7Ft2ymGmfc}}  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/tags/markdown/",
	"title": "Markdown",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/tags/metadata/",
	"title": "Metadata",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/writing/notes-and-warnings/",
	"title": "Notes &amp; warnings",
	"tags": [],
	"description": "",
	"content": " Cupper acknowledges that simple markdown is limiting when it comes to writing compelling documentation, so it provides a number of \u0026ldquo;shortcodes\u0026rdquo;. Shortcodes offer a simple syntax for including rich content. For example, Cupper provides shortcodes for including notes and warnings.\nNotes You may wish to pick out some content in your pattern\u0026rsquo;s documentation as a note — an aside to the main thrust of the pattern\u0026rsquo;s description. This is possible using the following syntax:\n\u0026#x7b;{% note %}} This is a note! It's something the reader may like to know about but is supplementary to the main content. Use notes when something may be interesting but not critical. \u0026#x7b;{% /note %}}  Notes render like this:\n   This is a note! It\u0026rsquo;s something the reader may like to know about but is supplementary to the main content. Use notes when something may be interesting but not critical.\n  Warnings Warnings are like notes, but with more urgency.\n\u0026#x7b;{% warning %}} This is a warning! It's about something the reader should be careful to do or to avoid doing. Use warnings when something could go wrong. \u0026#x7b;{% /warning %}}  Warnings render like this:\n   This is a warning! It\u0026rsquo;s about something the reader should be careful to do or to avoid doing. Use warnings when something could go wrong.\n  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/",
	"title": "Patterns",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/writing/references/",
	"title": "References",
	"tags": [],
	"description": "",
	"content": " Cross-references Cupper identifies the main content files in your documentation as patterns, and they\u0026rsquo;re kept in the content/ patterns folder. It\u0026rsquo;s easy to cross-reference patterns using the pattern shortcode. For example, I can reference the  Notes \u0026amp; warnings pattern. Here\u0026rsquo;s what the markdown looks like, including the shortcode:\nI can reference the \u0026#x7b;{% pattern \"Notes \u0026 warnings\" %}} pattern here.  This saves you having to worry about pathing and decorates the generated link with a bookmark icon, identifying the link as a pattern reference visually.\n   The title argument you supply to the shortcode must be exactly the same as the referenced pattern\u0026rsquo;s title metadata value and is case sensitive.\n  WCAG References WCAG 2.0 is the de facto standard for accessible interfaces. When writing about inclusive interfaces, sometimes you\u0026rsquo;ll want to refer to WCAG to highlight which success criteria the pattern meets.\nInstead of having to copy and paste content and links to WCAG, Cupper provides a shortcode mechanism that lets you simply list the success criteria by number:\n\u0026#x7b;{% wcag include=\"1.2.1, 1.3.1, 4.1.2\" %}}  This generates a list of references that includes the names of each criterion and links to them directly. Like this:\n   2.1.1 Keyboard (level A)      4.1.2 Name, Role, Value (level A)       You don\u0026rsquo;t have to leave spaces after the comma separators. They are optional.\n  Full descriptions Sometimes, you\u0026rsquo;ll want to include the full descriptions of the success criteria inline. This is possible by setting descriptions to true:\n\u0026#x7b;{% wcag include=\"1.3.1, 4.1.2\" descriptions=\"true\" %}}  Here\u0026rsquo;s the more verbose output:\n   2.1.1 Keyboard (level A):  All functionality of the content is operable through a keyboard interface without requiring specific timings for individual keystrokes, except where the underlying function requires input that depends on the path of the user\u0026#39;s movement and not just the endpoints     4.1.2 Name, Role, Value (level A):  For all user interface components (including but not limited to: form elements, links and components generated by scripts), the name and role can be programmatically determined; states, properties, and values that can be set by the user can be programmatically set; and notification of changes to these items is available to user agents, including assistive technologies.      Both omitting the descriptions attribute and including it with a \u0026ldquo;false\u0026rdquo; value will omit descriptions. If it is included it must have a value. A boolean attribute will break the output.\n  Inclusive Design Principle references Some inclusive design concepts are not reducible to success or fail criteria. This is why The Paciello Group wrote the Inclusive Design Principles. These can be listed by name.\n\u0026#x7b;{% principles include=\"Add value, Be consistent\" descriptions=\"true\" %}}  Here\u0026rsquo;s the output with descriptions=\u0026quot;true\u0026quot;:\n    Be consistent :  Use familiar conventions and apply them consistently. Familiar interfaces borrow from well-established patterns. These should be used consistently within the interface to reinforce their meaning and purpose. This should be applied to functionality, behavior, editorial, and presentation. You should say the same things in the same way and users should be able to do the same things in the same way.\n     Add value :  Consider the value of features and how they improve the experience for different users. Features should add value to the user experience by providing efficient and diverse ways to find and interact with content. Consider device features such as voice, geolocation, camera and vibration API\u0026#39;s, and how integration with connected devices or a second screen could provide choice.\n  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/writing/snippets/",
	"title": "Snippets",
	"tags": [],
	"description": "",
	"content": " A lot of the time, your larger documentation patterns will share some common techniques and utilities. For this reason, Cupper lets you save snippets of markdown in a snippets folder, alongside the main content folder.\nThe example visually-hidden.md snippet describes the CSS needed to create content that is visually hidden but still available to screen readers. Since this is a technique/utility you are likely to use often, it\u0026rsquo;s nice to be able to just drop a snippet into your markdown content. The snippet shortcode lets you do exactly that:\n\u0026#x7b;{% snippet file=\"visually-hidden.md\" %}}     To make your snippets truly reusable, try to write them in such a way that they make sense independent of surrounding text, a little bit like this note does.\n  Visually hidden snippet The visually-hidden utility class uses a set of special properties to hide content visually without making it unavailable to screen readers and other non-visual user agents. The class is defined like this:\n.visually-hidden { position: absolute !important; clip: rect(1px, 1px, 1px, 1px) !important; padding:0 !important; border:0 !important; height: 1px !important; width: 1px !important; overflow: hidden !important; }  Use it sparingly since, in most cases, what is identified non-visually should also be presented visually. Bear in mind that not all screen reader users are blind users.\n"
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/writing/tables-of-contents/",
	"title": "Tables of contents",
	"tags": [],
	"description": "",
	"content": "Pattern pages in Cupper that have two or more subheadings (\u0026lt;h2\u0026gt;s) automatically get a table of contents: a list of links to the main subsections for the page. This feature is made accessible as a navigation region with the \u0026ldquo;Table of contents\u0026rdquo; label and uses an ordered list. The table of contents markup for the  Setup page looks something like this:\n\u0026lt;nav class=\u0026quot;toc\u0026quot; aria-labelledby=\u0026quot;toc-heading\u0026quot;\u0026gt; \u0026lt;h2 id=\u0026quot;toc-heading\u0026quot;\u0026gt;Table of contents\u0026lt;/h2\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;#cleaning-the-content-folder\u0026quot;\u0026gt;“Cleaning” the content folder\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;#the-setup-command\u0026quot;\u0026gt;The setup command\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;#the-config-file\u0026quot;\u0026gt;The config file\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;#including-a-logo\u0026quot;\u0026gt;Including a logo\u0026lt;/a\u0026gt; \u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; \u0026lt;/nav\u0026gt;  Tables of content are a neat way to break down the content of the page and give users a navigable overview. However, they may not be to your taste. Never fear, you can turn tables of content off by adding toc = false to the TOML metadata for your pattern:\n+++ title = \u0026quot;My page with a few headings\u0026quot; toc = false +++  "
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://thepaciellogroup.github.io/cupper/patterns/coding/tested/",
	"title": "Tested using...",
	"tags": [],
	"description": "",
	"content": "When you\u0026rsquo;re an inclusive designer, it\u0026rsquo;s pertinent to do some testing. Following specs is one thing, but you need to verify that your component works okay for users.\nCupper provided a tested shortcode that lets you show which browsers and assistive technologies you\u0026rsquo;ve tried your design out in. Here\u0026rsquo;s an example. Note the commas and \u0026ldquo;+\u0026rdquo; signs.\n\u0026#x7b;{% tested using=\"Firefox + JAWS, Chrome, Safari iOS + Voiceover, Edge\" %}}  This outputs:\n   Tested using   Firefox  with JAWS   Chrome    Safari iOS  with Voiceover   Edge     The value for the using attribute follows a specific format: each testing setup is separated by a comma (with a space if you like, but it\u0026rsquo;s not mandatory). If you want to add an assistive technology (or any other \u0026ldquo;add on\u0026rdquo;) this needs to follow a \u0026ldquo;+\u0026rdquo;. This additional part can be anything, like \u0026ldquo;A VR headset I borrowed\u0026rdquo;, but there are only a few browser terms available. These are case sensitive, so you need to write them as below:\n Firefox Chrome Safari IE Edge Opera Chrome Android Firefox Android Safari iOS  Obviously, this is not a comprehensive list and more may be added over time. But it covers most of the main browsers for pairing with other software — at least for testing purposes.\n"
}]